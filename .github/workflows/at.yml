name: Train AI on New Data

on:
  push:
    paths:
      - 'Training_Data/**'
  workflow_dispatch:

jobs:
  validate-train:
    name: Validate and Train AI via Kaggle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install kaggle huggingface-hub

      - name: Download and Prepare Stock Data
        run: |
          python download_and_prepare_stock_data.py

      - name: Format for ALBERT
        run: |
          python format_for_albert.py --folder Training_Data

      - name: Validate and Prepare Data
        run: |
          python validate_and_prepare.py

      - name: Optimize Data for AI Model
        run: |
          python optimize_data.py --input Training_Data/validated_data.csv --output Training_Data/optimized_data.csv

      - name: Set up Kaggle CLI
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"$KAGGLE_USERNAME\",\"key\":\"$KAGGLE_KEY\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Create Kaggle Dataset
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          set -e
          mkdir -p kaggle_dataset
          cp Training_Data/optimized_data.csv kaggle_dataset/
          export KAGGLE_TIMESTAMP=$(date +%s)
          export KAGGLE_DATA_ID="ryanmanzo/stockai-data-$KAGGLE_TIMESTAMP"
          echo "{\"title\":\"stockai-data-$KAGGLE_TIMESTAMP\",\"id\":\"$KAGGLE_DATA_ID\",\"licenses\":[{\"name\":\"CC0-1.0\"}]}" > kaggle_dataset/dataset-metadata.json
          kaggle datasets create -p kaggle_dataset --dir-mode zip || { echo "Kaggle dataset creation failed"; cat kaggle_dataset/dataset-metadata.json; exit 1; }
          echo "$KAGGLE_DATA_ID" > kaggle_dataset_id.txt
          echo "$KAGGLE_TIMESTAMP" > kaggle_timestamp.txt

      - name: Push Kernel to Kaggle (with retries)
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          set -e
          mkdir -p kaggle_kernel
          cp train_model.py kaggle_kernel/
          export KAGGLE_TIMESTAMP=$(cat kaggle_timestamp.txt)
          export KAGGLE_KERNEL_ID="ryanmanzo/stockai-kernel-$KAGGLE_TIMESTAMP"
          export KAGGLE_DATA_ID=$(cat kaggle_dataset_id.txt)
          cat <<EOF > kaggle_kernel/kernel-metadata.json
{
  "id": "$KAGGLE_KERNEL_ID",
  "title": "stockai-kernel-$KAGGLE_TIMESTAMP",
  "code_file": "train_model.py",
  "language": "python",
  "kernel_type": "notebook",
  "is_private": true,
  "enable_gpu": true,
  "dataset_sources": ["$KAGGLE_DATA_ID"]
}
EOF

          cat kaggle_kernel/kernel-metadata.json

          ATTEMPT=0
          MAX_ATTEMPTS=5
          while ! kaggle kernels push -p kaggle_kernel 2> kaggle_kernel/push_error.log; do
            ATTEMPT=$((ATTEMPT+1))
            cat kaggle_kernel/push_error.log
            if grep -q "Expecting value" kaggle_kernel/push_error.log; then
              echo "‚ùå JSON error detected in kernel-metadata.json. Aborting."
              cat kaggle_kernel/kernel-metadata.json
              exit 1
            fi
            if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
              echo "üî• Kernel push failed after $MAX_ATTEMPTS attempts. Here's your metadata:"
              cat kaggle_kernel/kernel-metadata.json
              exit 1
            fi
            echo "ü§¨ Push failed. Trying again in 20 seconds... (attempt $ATTEMPT of $MAX_ATTEMPTS)"
            sleep 20
          done

      - name: Wait for Kernel Execution
        run: |
          echo "Sleeping 10 minutes to allow training to complete"
          sleep 600

      - name: Download Trained Model from Kaggle
        run: |
          kaggle kernels output ryanmanzo/stockai-kernel -p trained_model
          ls -la trained_model

      - name: Upload model weights to Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          huggingface-cli login --token $HF_TOKEN
          huggingface-cli upload rmanzo28/Stockai trained_model/model_weights.pth
